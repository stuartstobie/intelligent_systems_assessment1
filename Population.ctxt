#BlueJ class context
comment0.params=ind1\ ind2
comment0.target=int\ compare(Individual,\ Individual)
comment1.params=args
comment1.target=void\ main(java.lang.String[])
comment10.params=index
comment10.target=Individual\ getIndiv(int)
comment10.text=\r\n\ Return\ individual\ from\ population\r\n
comment11.params=ind1\ ind2
comment11.target=Individual[]\ crossover(Individual,\ Individual)
comment11.text=\r\n\ Crossover\ method\r\n
comment12.params=
comment12.target=double[]\ datX()
comment13.params=
comment13.target=double[]\ datY()
comment2.params=genGap
comment2.target=double\ generationGap(double[])
comment2.text=\r\n\ Determines\ if\ the\ population\ has\ diversivied\ enough\ since\ \r\n\ previous\ iterations\r\n
comment3.params=
comment3.target=Population()
comment3.text=\r\n\ Constructor\ for\ objects\ of\ class\ Population\r\n
comment4.params=
comment4.target=void\ sortFittest()
comment4.text=\r\n\ sorts\ myPop\ and\ puts\ the\ fittest\ at\ the\ top\r\n
comment5.params=
comment5.target=void\ elitePop()
comment5.text=\r\n\ copies\ Elite\ amount\ of\ entries\ from\ myPop\ (current)\ to\ elite\ \r\n\ array,\ ready\ for\ new\ pop.\r\n\ Only\ do\ after\ myPop\ has\ been\ sorted\r\n
comment6.params=
comment6.target=Individual\ popFittest()
comment6.text=\r\n\ Get\ the\ fittest\ from\ the\ current\ Generation\ -\ only\ do\ after\r\n\ array\ has\ been\ sorted\r\n
comment7.params=newPop
comment7.target=void\ setPopulation(Individual[])
comment7.text=\r\n\ Copies\ the\ entire\ new\ population\ back\ into\ myPop\r\n
comment8.params=
comment8.target=Individual[]\ getPop()
comment8.text=\r\n\ returns\ current\ population\r\n
comment9.params=
comment9.target=int\ popLength()
numComments=14
